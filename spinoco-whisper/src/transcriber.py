"""
Spinoco Whisper Transcriber
High-quality speech-to-text transcription using OpenAI Whisper Large-v3
"""
import json
import asyncio
import whisper
import torch
from pathlib import Path
from typing import Dict, List, Optional, Any
from datetime import datetime
import shutil

from .config import settings
from .logger import logger


class TranscriberModule:
    """
    Modul pro high-quality p≈ôepis audio soubor≈Ø pomoc√≠ Whisper Large-v3
    """
    
    def __init__(self):
        self.logger = logger.bind(module="transcriber")
        self.model = None
        self._setup_device()
        
    def _setup_device(self):
        """Nastaven√≠ za≈ô√≠zen√≠ pro Whisper (CPU/GPU)"""
        if settings.whisper_device == "auto":
            self.device = "cuda" if torch.cuda.is_available() else "cpu"
        else:
            self.device = settings.whisper_device
            
        self.logger.info(f"Whisper device nastaven na: {self.device}")
        
    def _load_model(self):
        """Naƒçten√≠ Whisper modelu (lazy loading)"""
        if self.model is None:
            self.logger.info(f"Naƒç√≠t√°m Whisper model: {settings.whisper_model}")
            try:
                self.model = whisper.load_model(
                    settings.whisper_model, 
                    device=self.device
                )
                self.logger.info("Whisper model √∫spƒõ≈°nƒõ naƒçten")
            except Exception as e:
                self.logger.error(f"Chyba p≈ôi naƒç√≠t√°n√≠ Whisper modelu: {e}")
                raise
                
    def _extract_metadata_from_filename(self, filename: str) -> Dict[str, Any]:
        """
        Extrahuje metadata z n√°zvu souboru
        Format: YYYYMMDD_HHMMSS_caller_firstdigit_duration_recordingid.ogg
        """
        try:
            # Odebereme p≈ô√≠ponu
            name_without_ext = Path(filename).stem
            parts = name_without_ext.split('_')
            
            if len(parts) >= 6:
                date_str = parts[0]
                time_str = parts[1]
                caller = parts[2]
                callee_first = parts[3]
                duration = parts[4]
                recording_id = parts[5]
                
                # Parsov√°n√≠ data a ƒçasu
                datetime_str = f"{date_str}_{time_str}"
                call_datetime = datetime.strptime(datetime_str, "%Y%m%d_%H%M%S")
                
                return {
                    "call_date": call_datetime.isoformat(),
                    "caller_number": caller,
                    "callee_first_digit": callee_first,
                    "duration": duration,
                    "recording_id": recording_id,
                    "original_filename": filename
                }
            else:
                self.logger.warning(f"Neoƒçek√°van√Ω form√°t n√°zvu souboru: {filename}")
                return {"original_filename": filename}
                
        except Exception as e:
            self.logger.warning(f"Chyba p≈ôi parsov√°n√≠ n√°zvu souboru {filename}: {e}")
            return {"original_filename": filename}
    
    def transcribe_file(self, audio_path: Path) -> Dict[str, Any]:
        """
        P≈ôep√≠≈°e jeden audio soubor pomoc√≠ Whisper
        
        Args:
            audio_path: Cesta k audio souboru
            
        Returns:
            Dict s v√Ωsledky p≈ôepisu a metadaty
        """
        self._load_model()
        
        self.logger.info(f"Zaƒç√≠n√°m p≈ôepis souboru: {audio_path.name}")
        
        try:
            # Progress info
            audio_size_mb = audio_path.stat().st_size / (1024 * 1024)
            self.logger.info(f"üé§ Audio: {audio_size_mb:.1f} MB, model: {settings.whisper_model}, device: {self.device}")
            
            # Whisper transcription s high-quality nastaven√≠m
            self.logger.info("‚è≥ Transkripce bƒõ≈æ√≠... (m≈Ø≈æe trvat nƒõkolik minut)")
            result = self.model.transcribe(
                str(audio_path),
                language="cs",  # Explicitn√≠ ƒçesk√Ω k√≥d
                temperature=settings.whisper_temperature,
                best_of=settings.whisper_best_of,
                beam_size=settings.whisper_beam_size,
                condition_on_previous_text=settings.condition_on_previous_text,
                initial_prompt="Toto je nahr√°vka technick√© podpory v ƒçe≈°tinƒõ. Obsahuje konverzaci o kotl√≠ch, topen√≠ a technick√Ωch probl√©mech.",
                verbose=True  # Zobrazit progress
            )
            
            # Extrakce metadat z n√°zvu souboru
            file_metadata = self._extract_metadata_from_filename(audio_path.name)
            
            # Sestaven√≠ v√Ωsledku
            transcription_result = {
                "transcription": {
                    "text": result["text"].strip(),
                    "language": result["language"],
                    "segments": result["segments"]
                },
                "metadata": {
                    **file_metadata,
                    "transcribed_at": datetime.now().isoformat(),
                    "whisper_model": settings.whisper_model,
                    "audio_file_size": audio_path.stat().st_size,
                    "audio_file_path": str(audio_path)
                },
                "processing_info": {
                    "device_used": self.device,
                    "whisper_settings": {
                        "temperature": settings.whisper_temperature,
                        "best_of": settings.whisper_best_of,
                        "beam_size": settings.whisper_beam_size,
                        "condition_on_previous_text": settings.condition_on_previous_text
                    }
                }
            }
            
            self.logger.info(
                f"P≈ôepis dokonƒçen: {audio_path.name}",
                text_length=len(result["text"]),
                segments_count=len(result["segments"])
            )
            
            return transcription_result
            
        except Exception as e:
            self.logger.error(f"Chyba p≈ôi p≈ôepisu souboru {audio_path.name}: {e}")
            raise
    
    def save_transcription(self, transcription_result: Dict[str, Any], output_path: Path):
        """Ulo≈æ√≠ v√Ωsledek p≈ôepisu do JSON souboru"""
        try:
            with open(output_path, 'w', encoding='utf-8') as f:
                json.dump(transcription_result, f, ensure_ascii=False, indent=2)
            
            self.logger.info(f"P≈ôepis ulo≈æen: {output_path}")
            
        except Exception as e:
            self.logger.error(f"Chyba p≈ôi ukl√°d√°n√≠ p≈ôepisu {output_path}: {e}")
            raise
    
    def move_processed_file(self, source_path: Path, processed_folder: Path):
        """P≈ôesune zpracovan√Ω audio soubor do processed slo≈æky"""
        try:
            processed_folder.mkdir(parents=True, exist_ok=True)
            dest_path = processed_folder / source_path.name
            shutil.move(str(source_path), str(dest_path))
            
            self.logger.info(f"Soubor p≈ôesunut: {source_path.name} -> processed/")
            
        except Exception as e:
            self.logger.error(f"Chyba p≈ôi p≈ôesunu souboru {source_path.name}: {e}")
            raise
    
    def process_file(self, audio_path: Path) -> bool:
        """
        Zpracuje jeden audio soubor - p≈ôep√≠≈°e a ulo≈æ√≠ v√Ωsledek
        
        Returns:
            True pokud bylo zpracov√°n√≠ √∫spƒõ≈°n√©
        """
        try:
            # Transcription
            transcription_result = self.transcribe_file(audio_path)
            
            # V√Ωstupn√≠ soubor
            output_filename = f"{audio_path.stem}_transcription.json"
            output_path = settings.output_folder / output_filename
            
            # Ulo≈æen√≠
            self.save_transcription(transcription_result, output_path)
            
            # P≈ôesun zpracovan√©ho souboru
            self.move_processed_file(audio_path, settings.processed_folder)
            
            return True
            
        except Exception as e:
            self.logger.error(f"Chyba p≈ôi zpracov√°n√≠ souboru {audio_path.name}: {e}")
            return False
    
    def get_pending_files(self) -> List[Path]:
        """Najde v≈°echny audio soubory ƒçekaj√≠c√≠ na zpracov√°n√≠"""
        audio_extensions = ['.ogg', '.wav', '.mp3', '.m4a', '.flac']
        pending_files = []
        
        if settings.input_folder.exists():
            for ext in audio_extensions:
                pending_files.extend(settings.input_folder.glob(f"*{ext}"))
        
        self.logger.info(f"Nalezeno {len(pending_files)} soubor≈Ø k zpracov√°n√≠")
        return pending_files
    
    async def process_all_pending(self) -> Dict[str, int]:
        """
        Zpracuje v≈°echny ƒçekaj√≠c√≠ audio soubory
        
        Returns:
            Dict se statistikami zpracov√°n√≠
        """
        pending_files = self.get_pending_files()
        
        if not pending_files:
            self.logger.info("≈Ω√°dn√© soubory k zpracov√°n√≠")
            return {"processed": 0, "failed": 0, "total": 0}
        
        stats = {"processed": 0, "failed": 0, "total": len(pending_files)}
        
        self.logger.info(f"Zaƒç√≠n√°m zpracov√°n√≠ {len(pending_files)} soubor≈Ø")
        
        for audio_file in pending_files:
            try:
                success = self.process_file(audio_file)
                if success:
                    stats["processed"] += 1
                else:
                    stats["failed"] += 1
                    
            except Exception as e:
                self.logger.error(f"Neoƒçek√°van√° chyba p≈ôi zpracov√°n√≠ {audio_file.name}: {e}")
                stats["failed"] += 1
        
        self.logger.info(
            "Zpracov√°n√≠ dokonƒçeno",
            **stats
        )
        
        return stats


async def main():
    """Hlavn√≠ funkce pro spu≈°tƒõn√≠ transcriberu"""
    import argparse
    import sys
    
    parser = argparse.ArgumentParser(description="Spinoco Whisper Transcriber")
    parser.add_argument('--input', type=str, help='Cesta k jednomu audio souboru (worker mode)')
    parser.add_argument('--output', type=str, help='V√Ωstupn√≠ adres√°≈ô pro transkripty (worker mode)')
    parser.add_argument('--no-move', action='store_true', 
                       help='Nep≈ôesouvat zpracovan√© soubory (pro pipeline/worker mode)')
    args = parser.parse_args()
    
    transcriber = TranscriberModule()
    
    if args.input and args.output:
        # WORKER MODE: Zpracov√°n√≠ jednoho souboru pro pipeline
        input_path = Path(args.input)
        output_dir = Path(args.output)
        
        if not input_path.exists():
            transcriber.logger.error(f"Audio soubor neexistuje: {input_path}")
            print(f"CHYBA: Audio soubor neexistuje: {input_path}")
            sys.exit(1)
        
        output_dir.mkdir(parents=True, exist_ok=True)
        
        try:
            # Zpracuj jeden soubor
            transcriber.logger.info(f"Worker mode: Zpracov√°v√°m {input_path.name}")
            result = transcriber.transcribe_file(input_path)
            
            # Ulo≈æ v√Ωsledek pomoc√≠ save_transcription metody
            output_file = output_dir / f"{input_path.stem}_transcription.json"
            transcriber.save_transcription(result, output_file)
            
            transcriber.logger.info(f"Worker mode: √öspƒõ≈°nƒõ zpracov√°no {input_path.name}")
            print(f"Uspesne zpracovano: {input_path.name}")
            print(f"Vystup: {output_file}")
            
            # V worker mode NEP≈òESOUVAT soubor (z≈Øst√°v√° v source)
            if not args.no_move:
                transcriber.logger.info("Standalone mode: P≈ôesouv√°m soubor do processed/")
                transcriber.move_processed_file(input_path, settings.processed_folder)
            else:
                transcriber.logger.info("Worker mode: Ponech√°v√°m soubor na m√≠stƒõ")
            
            sys.exit(0)
            
        except Exception as e:
            transcriber.logger.error(f"Worker mode: Zpracov√°n√≠ selhalo: {e}")
            print(f"CHYBA: Zpracovani selhalo: {input_path.name}")
            print(f"Detail: {e}")
            sys.exit(1)
    else:
        # STANDALONE MODE: Zpracov√°n√≠ v≈°ech ƒçek√°j√≠c√≠ch soubor≈Ø
        transcriber.logger.info("Standalone mode: Zpracov√°v√°m v≈°echny ƒçekaj√≠c√≠ soubory")
        stats = await transcriber.process_all_pending()
        
        print(f"\\nStatistiky zpracovani:")
        print(f"Uspesne zpracovano: {stats['processed']}")
        print(f"Chyby: {stats['failed']}")
        print(f"Celkem souboru: {stats['total']}")


if __name__ == "__main__":
    asyncio.run(main())
